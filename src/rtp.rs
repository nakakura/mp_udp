extern "C" {
    pub fn header_length(src: *const u8) -> u16;
    pub fn extension(src: *const u8) -> u16;
    pub fn version(src: *const u8) -> u16;
    pub fn padding(src: *const u8) -> u16;
    pub fn set_padding(src: *mut u8, padding: u16);
    pub fn csrccount(src: *const u8) -> u16;
    pub fn timestamp(src: *const u8) -> u32;
    pub fn seq_number(src: *const u8) -> u16;
    pub fn set_seq_number(src: *mut u8, num: u16);
    pub fn split_rtp(src: *const u8, length: u16, header: *mut u8, payload: *mut u8);
    pub fn is_keyframe(codec: i32, buffer: *const u8, len: i32) -> i32;
}

#[test]
fn test_add_and_remove_padding(){
    let original_rtp: Vec<u8> = vec!(128, 96, 171, 13, 174, 196, 81, 160, 248, 191, 110, 160, 92, 129, 154, 70, 32, 215, 255, 254, 218, 166, 88, 0, 9, 195, 59, 159, 160, 34, 129, 218, 52, 212, 169, 104, 191, 189, 249, 28, 206, 149, 120, 14, 126, 23, 148, 93, 97, 56, 13, 69, 59, 153, 125, 116, 177, 169, 77, 181, 232, 114, 68, 1, 130, 85, 70, 140, 154, 20, 40, 138, 80, 117, 224, 191, 93, 24, 79, 60, 152, 110, 142, 9, 225, 92, 181, 207, 1, 230, 118, 196, 42, 55, 102, 155, 11, 199, 24, 123, 130, 171, 242, 112, 53, 122, 249, 53, 166, 189, 58, 208, 239, 51, 102, 21, 21, 143, 107, 227, 181, 247, 146, 201, 115, 177, 23, 26, 4, 36, 240, 53, 224, 234, 88, 246, 207, 246, 162, 228, 146, 0, 78, 252, 203, 107, 174, 11, 195, 31, 216, 108, 160, 220, 23, 131, 22, 6, 116, 252, 238, 155, 51, 86, 145, 144, 84, 17, 85, 141, 7, 170, 205, 59, 8, 50, 141, 24, 121, 129, 110, 65, 133, 221, 157, 235, 18, 43, 238, 75, 185, 18, 11, 186, 99, 87, 176, 139, 159, 209, 179, 65, 152, 225, 49, 242, 187, 97, 97, 231, 133, 131, 116, 59, 36, 252, 188, 70, 166, 60, 151, 170, 52, 51, 24, 23, 82, 205, 234, 46, 235, 200, 28, 231, 240, 22, 244, 30, 154, 8, 175, 133, 3, 36, 98, 112, 16, 11, 36, 224, 190, 214, 21, 22, 154, 214, 194, 242, 7, 231, 240, 134, 17, 167, 147, 231, 175, 161, 233, 5, 73, 174, 232, 145, 19, 226, 138, 12, 204, 244, 182, 197, 39, 35, 68, 88, 114, 67, 181, 187, 90, 185, 168, 105, 145, 74, 2, 215, 0, 242, 237, 236, 30, 199, 39, 55, 5, 150, 128, 153, 212, 121, 218, 189, 165, 47, 205, 195, 194, 58, 55, 251, 35, 124, 62, 141, 126, 168, 250, 91, 120, 165, 181, 211, 212, 160, 8, 20, 43, 221, 104, 248, 163, 149, 97, 108, 198, 84, 187, 27, 44, 210, 64, 32, 1, 218, 72, 0, 223, 207, 140, 62, 168, 63, 39, 58, 74, 31, 184, 0, 202, 133, 61, 39, 209, 128, 212, 162, 155, 95, 124, 124, 232, 119, 250, 160, 219, 120, 254, 104, 26, 166, 173, 164, 252, 113, 219, 168, 95, 33, 95, 114, 212, 131, 117, 133, 46, 18, 255, 149, 255, 153, 206, 166, 121, 92, 172, 5, 152, 205, 74, 32, 130, 76, 132, 246, 80, 145, 46, 91, 16, 136, 66, 197, 234, 174, 39, 104, 35, 128, 189, 0, 224, 34, 127, 160, 246, 108, 119, 149, 205, 171, 15, 252, 10, 213, 210, 41, 185, 53, 0, 236, 30, 230, 90, 35, 76, 59, 174, 23, 250, 76, 15, 139, 251, 238, 149, 191, 254, 226, 147, 59, 185, 186, 174, 246, 109, 202, 96, 173, 168, 83, 43, 150, 5, 85, 233, 1, 32, 141);
    let mut rtp_array: Vec<u8> = original_rtp.clone();
    unsafe {
        set_padding(rtp_array.as_mut_ptr(), 1);
    }
    let padding_bit = unsafe{
        padding(rtp_array.as_ptr())
    };
    assert_eq!(padding_bit, 1);
}

# [test]
fn test_set_padding() {
    let mut rtp_array: Vec<u8> = vec!(128, 96, 171, 13, 174, 196, 81, 160, 248, 191, 110, 160, 92, 129, 154, 70, 32, 215, 255, 254, 218, 166, 88, 0, 9, 195, 59, 159, 160, 34, 129, 218, 52, 212, 169, 104, 191, 189, 249, 28, 206, 149, 120, 14, 126, 23, 148, 93, 97, 56, 13, 69, 59, 153, 125, 116, 177, 169, 77, 181, 232, 114, 68, 1, 130, 85, 70, 140, 154, 20, 40, 138, 80, 117, 224, 191, 93, 24, 79, 60, 152, 110, 142, 9, 225, 92, 181, 207, 1, 230, 118, 196, 42, 55, 102, 155, 11, 199, 24, 123, 130, 171, 242, 112, 53, 122, 249, 53, 166, 189, 58, 208, 239, 51, 102, 21, 21, 143, 107, 227, 181, 247, 146, 201, 115, 177, 23, 26, 4, 36, 240, 53, 224, 234, 88, 246, 207, 246, 162, 228, 146, 0, 78, 252, 203, 107, 174, 11, 195, 31, 216, 108, 160, 220, 23, 131, 22, 6, 116, 252, 238, 155, 51, 86, 145, 144, 84, 17, 85, 141, 7, 170, 205, 59, 8, 50, 141, 24, 121, 129, 110, 65, 133, 221, 157, 235, 18, 43, 238, 75, 185, 18, 11, 186, 99, 87, 176, 139, 159, 209, 179, 65, 152, 225, 49, 242, 187, 97, 97, 231, 133, 131, 116, 59, 36, 252, 188, 70, 166, 60, 151, 170, 52, 51, 24, 23, 82, 205, 234, 46, 235, 200, 28, 231, 240, 22, 244, 30, 154, 8, 175, 133, 3, 36, 98, 112, 16, 11, 36, 224, 190, 214, 21, 22, 154, 214, 194, 242, 7, 231, 240, 134, 17, 167, 147, 231, 175, 161, 233, 5, 73, 174, 232, 145, 19, 226, 138, 12, 204, 244, 182, 197, 39, 35, 68, 88, 114, 67, 181, 187, 90, 185, 168, 105, 145, 74, 2, 215, 0, 242, 237, 236, 30, 199, 39, 55, 5, 150, 128, 153, 212, 121, 218, 189, 165, 47, 205, 195, 194, 58, 55, 251, 35, 124, 62, 141, 126, 168, 250, 91, 120, 165, 181, 211, 212, 160, 8, 20, 43, 221, 104, 248, 163, 149, 97, 108, 198, 84, 187, 27, 44, 210, 64, 32, 1, 218, 72, 0, 223, 207, 140, 62, 168, 63, 39, 58, 74, 31, 184, 0, 202, 133, 61, 39, 209, 128, 212, 162, 155, 95, 124, 124, 232, 119, 250, 160, 219, 120, 254, 104, 26, 166, 173, 164, 252, 113, 219, 168, 95, 33, 95, 114, 212, 131, 117, 133, 46, 18, 255, 149, 255, 153, 206, 166, 121, 92, 172, 5, 152, 205, 74, 32, 130, 76, 132, 246, 80, 145, 46, 91, 16, 136, 66, 197, 234, 174, 39, 104, 35, 128, 189, 0, 224, 34, 127, 160, 246, 108, 119, 149, 205, 171, 15, 252, 10, 213, 210, 41, 185, 53, 0, 236, 30, 230, 90, 35, 76, 59, 174, 23, 250, 76, 15, 139, 251, 238, 149, 191, 254, 226, 147, 59, 185, 186, 174, 246, 109, 202, 96, 173, 168, 83, 43, 150, 5, 85, 233, 1, 32, 141);
    unsafe{
        set_padding(rtp_array.as_mut_ptr(), 1);
    }
    let padding = unsafe{
        padding(rtp_array.as_ptr())
    };
    assert_eq!(padding, 1);
}